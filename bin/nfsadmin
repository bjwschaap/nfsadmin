#!/usr/bin/env ruby
require 'gli'
require 'nfsadmin'

include GLI::App

program_desc 'nfsadmin is a CLI to manage the NFS service and its exports'

version Nfsadmin::VERSION

flag [:c,:config], :default_value => '/etc/exports'

desc 'The export command manages exported NFS shares'
command :export do |c|

  c.desc 'List all NFS exported shares on this server'
  c.command :list do |list|
    list.desc 'Define output type. Valid types are: text, json'
    list.default_value 'text'
    list.flag [:f, :format]
    list.action do |global_options,options,args|
      Nfsadmin::Tasks.list_shares(global_options[:c], options[:f])
    end
  end

  c.desc 'Add a new NFS export to be shared on this server'
  c.command :add do |add|
    add.desc 'The location to be exported as NFS share'
    add.flag [:l, :location]
    add.desc 'The network address (networks and wildcards allowed)'
    add.flag [:a, :address]
    add.desc 'The NFS options for this share, e.g. rw,sync,no_root_squash,no_subtree_check'
    add.flag [:o, :options]
    add.action do |global_options,options,args|
      Nfsadmin::Tasks.create_share(global_options[:c], options[:l], options[:a], options[:o])
    end
  end

  c.desc 'Delete an NFS export from this server'
  c.command [:rm,:delete] do |delete|
    delete.action do |global_options,options,args|
      Nfsadmin::Tasks.delete_share(global_options[:c], options[:l])
    end
  end

  c.default_command :list
end

desc 'The service command manages the NFS service'
arg_name 'Describe arguments to service here'
command :service do |c|

  c.desc 'Return the status of the NFS service(s)'
  c.command :status do |status|
    status.action do
      Nfsadmin::Tasks.show_status
    end
  end

  c.desc 'Start the NFS service(s)'
  c.command :start do |start|
    start.action do
      Nfsadmin::Tasks.start_service
    end
  end

  c.desc 'Stop the NFS service(s)'
  c.command :stop do |stop|
    stop.action do
      Nfsadmin::Tasks.stop_service
    end
  end

  c.desc 'Restart the NFS service(s)'
  c.command :start do |restart|
    restart.action do
      Nfsadmin::Tasks.restart_service
    end
  end

  c.desc 'Reload the NFS exports configuration'
  c.command :reload do |reload|
    reload.action do
      Nfsadmin::Tasks.reload_config
    end
  end

  c.default_command :status
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
